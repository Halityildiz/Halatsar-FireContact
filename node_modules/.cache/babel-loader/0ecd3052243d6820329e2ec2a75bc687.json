{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport firebase from \"../utils/firebase\";\nimport { getDatabase, set, query, ref, push, onValue, remove, child, update } from \"firebase/database\";\nimport { useState, useEffect } from \"react\";\nimport { successNote } from \"./customToastify\";\nexport const addInfo = info => {\n  const db = getDatabase();\n  const userRef = ref(db, \"contact\");\n  const newUserRef = push(userRef);\n  set(newUserRef, {\n    username: info.username,\n    phoneNumber: info.phoneNumber,\n    gender: info.gender\n  });\n  console.log(\"veri eklendi\");\n};\nexport const useFetch = () => {\n  _s();\n\n  const [contactList, setContactList] = useState();\n  const [isLoading, setIsLoading] = useState;\n  useEffect(() => {\n    setIsLoading(true);\n    const db = getDatabase();\n    const userRef = ref(db, \"contact\");\n    onValue(query(userRef), snapshot => {\n      const contacts = snapshot.val();\n      const contactArray = [];\n\n      for (let id in contacts) {\n        contactArray.push({\n          id,\n          ...contacts[id]\n        });\n      }\n\n      setContactList(contactArray);\n      setIsLoading(false);\n    });\n  }, []);\n  return {\n    isLoading,\n    contactList\n  };\n};\n\n_s(useFetch, \"15L+fb/+eWx6VrAd9gqnN7KJUF8=\");\n\nexport const deleteInfo = id => {\n  const db = getDatabase(); // const userRef = ref(db, \"contact\");\n\n  remove(ref(db, \"contact/\" + id));\n};\nexport const updateInfo = info => {\n  const db = getDatabase();\n  const newUserKey = push(child(ref(db), \"contact/\")).key;\n  const updates = {};\n  updates[\"contact/\" + newUserKey] = info;\n  return update(ref(db), updates);\n};","map":{"version":3,"sources":["/Users/halityildiz/Documents/Github/Clarusway-Fullstack/Clarusway-Frontend/React/Projects/fire-contact/src/utils/functions.js"],"names":["firebase","getDatabase","set","query","ref","push","onValue","remove","child","update","useState","useEffect","successNote","addInfo","info","db","userRef","newUserRef","username","phoneNumber","gender","console","log","useFetch","contactList","setContactList","isLoading","setIsLoading","snapshot","contacts","val","contactArray","id","deleteInfo","updateInfo","newUserKey","key","updates"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SACEC,WADF,EAEEC,GAFF,EAGEC,KAHF,EAIEC,GAJF,EAKEC,IALF,EAMEC,OANF,EAOEC,MAPF,EAQEC,KARF,EASEC,MATF,QAUO,mBAVP;AAWA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU;AAC/B,QAAMC,EAAE,GAAGd,WAAW,EAAtB;AACA,QAAMe,OAAO,GAAGZ,GAAG,CAACW,EAAD,EAAK,SAAL,CAAnB;AACA,QAAME,UAAU,GAAGZ,IAAI,CAACW,OAAD,CAAvB;AACAd,EAAAA,GAAG,CAACe,UAAD,EAAa;AACdC,IAAAA,QAAQ,EAAEJ,IAAI,CAACI,QADD;AAEdC,IAAAA,WAAW,EAAEL,IAAI,CAACK,WAFJ;AAGdC,IAAAA,MAAM,EAAEN,IAAI,CAACM;AAHC,GAAb,CAAH;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,CAVM;AAYP,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,EAA9C;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMZ,EAAE,GAAGd,WAAW,EAAtB;AACA,UAAMe,OAAO,GAAGZ,GAAG,CAACW,EAAD,EAAK,SAAL,CAAnB;AACAT,IAAAA,OAAO,CAACH,KAAK,CAACa,OAAD,CAAN,EAAkBY,QAAD,IAAc;AACpC,YAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAT,EAAjB;AACA,YAAMC,YAAY,GAAG,EAArB;;AACA,WAAK,IAAIC,EAAT,IAAeH,QAAf,EAAyB;AACvBE,QAAAA,YAAY,CAAC1B,IAAb,CAAkB;AAAE2B,UAAAA,EAAF;AAAM,aAAGH,QAAQ,CAACG,EAAD;AAAjB,SAAlB;AACD;;AACDP,MAAAA,cAAc,CAACM,YAAD,CAAd;AACAJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KARM,CAAP;AASD,GAbQ,EAaN,EAbM,CAAT;AAcA,SAAO;AAAED,IAAAA,SAAF;AAAaF,IAAAA;AAAb,GAAP;AACD,CAlBM;;GAAMD,Q;;AAoBb,OAAO,MAAMU,UAAU,GAAID,EAAD,IAAQ;AAChC,QAAMjB,EAAE,GAAGd,WAAW,EAAtB,CADgC,CAEhC;;AACAM,EAAAA,MAAM,CAACH,GAAG,CAACW,EAAD,EAAK,aAAaiB,EAAlB,CAAJ,CAAN;AACD,CAJM;AAMP,OAAO,MAAME,UAAU,GAAIpB,IAAD,IAAU;AAClC,QAAMC,EAAE,GAAGd,WAAW,EAAtB;AACA,QAAMkC,UAAU,GAAG9B,IAAI,CAACG,KAAK,CAACJ,GAAG,CAACW,EAAD,CAAJ,EAAU,UAAV,CAAN,CAAJ,CAAiCqB,GAApD;AACA,QAAMC,OAAO,GAAG,EAAhB;AACAA,EAAAA,OAAO,CAAC,aAAaF,UAAd,CAAP,GAAmCrB,IAAnC;AACA,SAAOL,MAAM,CAACL,GAAG,CAACW,EAAD,CAAJ,EAAUsB,OAAV,CAAb;AACD,CANM","sourcesContent":["import firebase from \"../utils/firebase\";\nimport {\n  getDatabase,\n  set,\n  query,\n  ref,\n  push,\n  onValue,\n  remove,\n  child,\n  update,\n} from \"firebase/database\";\nimport { useState, useEffect } from \"react\";\nimport { successNote } from \"./customToastify\";\n\nexport const addInfo = (info) => {\n  const db = getDatabase();\n  const userRef = ref(db, \"contact\");\n  const newUserRef = push(userRef);\n  set(newUserRef, {\n    username: info.username,\n    phoneNumber: info.phoneNumber,\n    gender: info.gender,\n  });\n  console.log(\"veri eklendi\");\n};\n\nexport const useFetch = () => {\n  const [contactList, setContactList] = useState();\n  const [isLoading, setIsLoading] = useState;\n  useEffect(() => {\n    setIsLoading(true);\n    const db = getDatabase();\n    const userRef = ref(db, \"contact\");\n    onValue(query(userRef), (snapshot) => {\n      const contacts = snapshot.val();\n      const contactArray = [];\n      for (let id in contacts) {\n        contactArray.push({ id, ...contacts[id] });\n      }\n      setContactList(contactArray);\n      setIsLoading(false);\n    });\n  }, []);\n  return { isLoading, contactList };\n};\n\nexport const deleteInfo = (id) => {\n  const db = getDatabase();\n  // const userRef = ref(db, \"contact\");\n  remove(ref(db, \"contact/\" + id));\n};\n\nexport const updateInfo = (info) => {\n  const db = getDatabase();\n  const newUserKey = push(child(ref(db), \"contact/\")).key;\n  const updates = {};\n  updates[\"contact/\" + newUserKey] = info;\n  return update(ref(db), updates);\n};\n"]},"metadata":{},"sourceType":"module"}